"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
const pug = __importStar(require("volar-service-pug/out/languageService"));
const source_map_1 = require("@volar/source-map");
const plugin = ({ modules }) => {
    return {
        name: require('../package.json').name,
        version: 1,
        compileSFCTemplate(lang, template, options) {
            if (lang === 'pug') {
                const pugFile = pug?.baseParse(template);
                const map = new source_map_1.SourceMap(pugFile.mappings);
                if (pugFile) {
                    const compiler = modules['@vue/compiler-dom'];
                    const completed = compiler.compile(pugFile.htmlCode, {
                        ...options,
                        comments: true,
                        onWarn(warning) {
                            options?.onWarn?.(createProxyObject(warning));
                        },
                        onError(error) {
                            options?.onError?.(createProxyObject(error));
                        },
                    });
                    return createProxyObject(completed);
                    function createProxyObject(target) {
                        return new Proxy(target, {
                            get(target, prop) {
                                if (prop === 'offset') {
                                    const htmlOffset = target.offset;
                                    for (const mapped of map.toSourceOffsets(htmlOffset)) {
                                        return mapped[0];
                                    }
                                    return -1;
                                }
                                const value = target[prop];
                                if (typeof value === 'object') {
                                    return createProxyObject(target[prop]);
                                }
                                return value;
                            }
                        });
                    }
                }
            }
        },
    };
};
module.exports = plugin;
//# sourceMappingURL=index.js.map